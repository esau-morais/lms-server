datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      UserRole
  courses   Course[]
  progress  Progress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  lessons     Lesson[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Lesson {
  id          String       @id @default(uuid())
  title       String
  content     String?      @db.Text
  videoUrl    String?      @db.Text
  isFree      Boolean      @default(false)
  isPublished Boolean      @default(false)
  attachments Attachment[]
  course      Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String?
  progress    Progress[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([courseId])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id          String   @id @default(uuid())
  isCompleted Boolean  @default(false)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId    String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
}
